{"/home/travis/build/npmtest/node-npmtest-gulp-connect-php/test.js":"/* istanbul instrument in package npmtest_gulp_connect_php */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-connect-php/lib.npmtest_gulp_connect_php.js":"/* istanbul instrument in package npmtest_gulp_connect_php */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_connect_php = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_connect_php = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-connect-php/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-connect-php && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_connect_php */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_connect_php\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_connect_php.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_connect_php.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_connect_php.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_connect_php.__dirname + '/lib.npmtest_gulp_connect_php.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-connect-php/node_modules/gulp-connect-php/index.js":"/* jshint esversion: 6, node: true */\n'use strict';\n\n(function _gulp_connect_php_module_scoping(OPTIONS_SPAWN_OBJ, OPTIONS_PHP_CLI_ARR) {\n  const childProcess = require('child_process');\n  let spawn = childProcess.spawn;\n  const exec = childProcess.exec;\n  const http = require('http');\n  const open = require('opn');\n  const binVersionCheck = require('bin-version-check');\n  const fs = require('fs');\n\n  //let counter = 0;\n\n  function EnumSet() {\n    [...arguments].forEach((x) => { this[x] = Symbol(x) });\n  }\n\n  const PhpDevelopmentServerConnection = ((function _PhpDevelopmentServerConnection_private_scope() {\n    const Status = new EnumSet('NEW', 'STARTING', 'STARTED', 'FINISHED');\n\n    /**\n     * Private: Check wherther the server is running.\n     * @param hostname\n     * @param port\n     * @param cb\n     */\n    function checkServer(hostname, port, cb) {\n      const self = this;\n      //console.log(`[${this.counter}] checkServer`);\n\n      if (self.status !== Status.STARTING) return;\n\n      setTimeout(function _checkServer_fire() {\n        http.request({\n          method: 'HEAD',\n          hostname: hostname,\n          port: port\n        }, function _checkServer_httpCallback(res) {\n          const statusCodeType = Number(res.statusCode.toString()[0]);\n\n          if ([2, 3, 4].indexOf(statusCodeType) !== -1) {\n            return cb(true);\n          } else if (statusCodeType === 5) {\n            console.log(\n              'Server docroot returned 500-level response. Please check ' +\n              'your configuration for possible errors.'\n            );\n            return cb(true);\n          }\n\n          checkServer.call(self, hostname, port, cb);\n        }).on('error', function _checkServer_httpError(err) {\n          // back off after 1s\n          if (++self.checkServerTries > 20) {\n            console.log('PHP server not started. Retrying...');\n            return cb(false);\n          }\n          checkServer.call(self, hostname, port, cb);\n        }).end();\n      }, 15);\n    }\n\n    /**\n     * PHP Development Server Connection Instance\n     *\n     * {@link http://php.net/manual/en/features.commandline.webserver.php}\n     */\n    class PhpDevelopmentServerConnection {\n      /**\n       * Create a new Instance\n       * @param opts Default Options. Will be merged with our own internal set of default options. Can be overwridden in the connect ('server') call.\n       * @returns {PhpDevelopmentServerConnection}\n       */\n      constructor(opts) {\n        //this.counter = ++counter;\n        //console.log(`[${this.counter}] constructor`);\n\n        this.status = Status.NEW;\n\n        this.checkServerTries = 0;\n\n        this.workingPort = 8000;\n\n        this.defaults = Object.assign({\n          port: 8000,\n          hostname: '127.0.0.1',\n          base: '.',\n          open: false,\n          bin: 'php',\n          root: '/',\n          stdio: 'inherit',\n          configCallback: null,\n          debug: false\n        }, opts || {});\n\n        return this; // `new` bug\n      }\n\n      /**\n       * 'Close'/Shutdown the PHP Development Server\n       * @param cb Optional single parameter Callback. Parameter is the return (if any) of the node `ChildProcess.kill(...)` call or nothing if not started.\n       */\n      closeServer(cb) {\n        cb = cb || function _closeServerCb_noop() { };\n        //console.log(`[${this.counter}] closeServer`);\n        const self = this;\n        if (this.loading) {\n          setTimeout(() => self.closeServer(cb), 5);\n          return;\n        }\n\n        if (this.childProcess) {\n          cb(this.childProcess.kill('SIGKILL'));\n          this.status = Status.FINISHED;\n          return;\n        }\n\n        cb();\n      }\n\n      /**\n       * Get the port the server is running on.\n       * @returns {number|*} Port number.\n       */\n      get port() { return this.workingPort; }\n\n      /**\n       * Start the Server\n       * @param options Optional Server Options to overwrite the defaults in the CTor.\n       * @param cb Optional Callback for Completion. May pass in an error when there is a fault.\n       */\n      server(options, cb) {\n        //console.log(`[${this.counter}] server`);\n        cb = cb || function _serverCB_noop() { };\n\n        const self = this;\n\n        if (this.status !== Status.NEW && this.status !== Status.FINISHED) {\n          return cb(new Error('You may not start a server that is starting or started.'));\n        }\n\n        options = Object.assign({}, this.defaults, options);\n\n        this.workingPort = options.port;\n        const host = options.hostname + ':' + options.port;\n        const args = ['-S', host, '-t', options.base];\n\n        if (options.ini) {\n          args.push('-c', options.ini);\n        }\n\n        if (options.router) {\n          args.push(require('path').resolve(options.router));\n        }\n\n        if (options.debug) {\n          spawn = function _debugSpawn(outerSpawn) {\n            return function debugSpawnWrapper(file, args, options) {\n              console.log('Invoking Spawn with:');\n              console.log(file);\n              console.log(args);\n              console.log(options);\n\n              return outerSpawn(file, args, options);\n            }\n          }(spawn);\n        }\n\n        if (options.configCallback === null || options.configCallback === undefined) {\n          options.configCallback = function noOpConfigCallback(type, collection) {\n            return collection;\n          }\n        }\n\n        spawn = function _configCallbackSpawn(outerSpawn) {\n          return function configCallbackSpawnWrapper(file, spawnArgs, spawnOptions) {\n            return outerSpawn(file, options.configCallback(OPTIONS_PHP_CLI_ARR, spawnArgs) || spawnArgs, options.configCallback(OPTIONS_SPAWN_OBJ, spawnOptions) || spawnOptions);\n          }\n        }(spawn);\n\n        binVersionCheck(`\"${options.bin}\"`, '>=5.4', function _binVerCheck(err) {\n          if (err) {\n            cb(err);\n            return;\n          }\n          const checkPath = function _checkPath() {\n            const exists = fs.existsSync(options.base);\n            if (exists === true) {\n              self.status = Status.STARTING;\n              self.childProcess = spawn(options.bin, args, {\n                cwd: '.',\n                stdio: options.stdio\n              });\n            }\n            else {\n              setTimeout(checkPath, 100);\n            }\n          };\n          checkPath();\n          // check when the server is ready. tried doing it by listening\n          // to the child process `data` event, but it's not triggered...\n          checkServer.call(self, options.hostname, options.port, function _server_checkServer() {\n            self.status = Status.STARTED;\n            if (options.open) {\n              open('http://' + host + options.root);\n            }\n            cb();\n          }.bind(this));\n        }.bind(this));\n      };\n    }\n\n    return PhpDevelopmentServerConnection;\n  }))();\n\n  module.exports = (function _export_scoping() {\n\n    let returnStructure = PhpDevelopmentServerConnection;\n\n    const adopterBinder = (adopter, inst, method) => adopter[method] = inst[method].bind(inst);\n\n    returnStructure.compat = (function _naught_version_compatibility() {\n      // This is segregated beacuse in the future around v1.5 we will make it emit a warning.\n      // In v2.0 we will gut it completely.\n      const inst = new PhpDevelopmentServerConnection;\n      inst.OPTIONS_SPAWN_OBJ = OPTIONS_SPAWN_OBJ;\n      inst.OPTIONS_PHP_CLI_ARR = OPTIONS_PHP_CLI_ARR;\n      return inst;\n    })();\n\n    // You cannot actually bind a function to a method directly... so... lets manually bind to get a function that calls the right instance.\n    adopterBinder(returnStructure, returnStructure.compat, 'server');\n    adopterBinder(returnStructure, returnStructure.compat, 'closeServer');\n\n    returnStructure.OPTIONS_SPAWN_OBJ = OPTIONS_SPAWN_OBJ;\n    returnStructure.OPTIONS_PHP_CLI_ARR = OPTIONS_PHP_CLI_ARR;\n\n    return returnStructure;\n  })();\n})('spawn', 'php_args');\n"}